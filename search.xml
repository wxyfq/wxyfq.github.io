<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ffplay源码解析（三）：PacketQueue</title>
      <link href="/2022/11/29/ffplay%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9APacketQueue/"/>
      <url>/2022/11/29/ffplay%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9APacketQueue/</url>
      
        <content type="html"><![CDATA[<p>ffmpeg库解析音视频数据的顺序是先解封装（demuxing）再解码（decoding），其中解封装是从原始数据中分离出不同的数据流，如音频流，视频流等。解码是将从音视频流中读取的压缩数据解析成音视频输出设备可以识别的数据格式，音频如PCM，视频如YUV420P等。ffmpeg相关库的实现中，负责保存压缩数据的数据结构为struct AVPacket，负责保存解码后数据的数据结构为struct AVFrame。ffplay为存放这两种类型的数据创建了两个队列，存放AVPacket的队列就是本章介绍的PacketQueue，存放AVFrame的队列是我们下一章要介绍的FrameQueue；</p><p>先来看一下PacketQueue相关的结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">MyAVPacketList</span> &#123;</span></span><br><span class="line">  AVPacket *pkt;<span class="comment">//压缩的包数据</span></span><br><span class="line">  <span class="type">int</span> serial;<span class="comment">//包序列号，跟所在的包序列的序列号一致</span></span><br><span class="line">&#125; MyAVPacketList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PacketQueue</span> &#123;</span></span><br><span class="line">  AVFifoBuffer *pkt_list;<span class="comment">//先进先出队列</span></span><br><span class="line">  <span class="type">int</span> nb_packets;<span class="comment">//队列中包的数量</span></span><br><span class="line">  <span class="type">int</span> size;<span class="comment">//队列大小</span></span><br><span class="line">  <span class="type">int64_t</span> duration;<span class="comment">//队列中数据的播放持续时间</span></span><br><span class="line">  <span class="type">int</span> abort_request;<span class="comment">//结束请求</span></span><br><span class="line">  <span class="type">int</span> serial;<span class="comment">//序列号，用于标识一段连续数据</span></span><br><span class="line">  SDL_mutex *mutex;<span class="comment">//线程互斥量</span></span><br><span class="line">  SDL_cond *cond;<span class="comment">//线程条件变量</span></span><br><span class="line">&#125; PacketQueue;</span><br></pre></td></tr></table></figure><p>PacketQueue结构体中各个参数的含义已经在注释中写明，PacketQueue的操作函数有以下几个：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">packet_queue_put_private</span><span class="params">(PacketQueue *q, AVPacket *pkt)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">packet_queue_put</span><span class="params">(PacketQueue *q, AVPacket *pkt)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">packet_queue_put_nullpacket</span><span class="params">(PacketQueue *q, AVPacket *pkt, <span class="type">int</span> stream_index)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">packet_queue_init</span><span class="params">(PacketQueue *q)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">packet_queue_flush</span><span class="params">(PacketQueue *q)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">packet_queue_destroy</span><span class="params">(PacketQueue *q)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">packet_queue_abort</span><span class="params">(PacketQueue *q)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">packet_queue_start</span><span class="params">(PacketQueue *q)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">packet_queue_get</span><span class="params">(PacketQueue *q, AVPacket *pkt, <span class="type">int</span> block, <span class="type">int</span> *serial)</span>;</span><br></pre></td></tr></table></figure><p>packet_queue_init用memset函数将结构体所在内存以0初始化，这样可以将结构体中int类型的值初始化为0。然后创建一个fifo队列和用于线程同步的互斥量以及条件变量，最后将abort_request设置为1表示队列当前状态不可用；</p><p>packet_queue_flush函数将队列中数据清空，serial值加1，这些操作都在上锁状态下执行，相同的serial值表明这些数据是一段连续的内容，flush操作清空并丢弃了队列中还未被读取的数据，所以通过serial加1来表示接下来的数据跟之前的数据表示的已经不是连续的内容了；</p><p>packet_queue_destory调用flush函数清空数据，然后销毁fifo队列，以及互斥量和条件变量；</p><p>packet_queue_abort在上锁状态下将abort_request设置为1，并调用SDL_ConSignal()函数通知条件变量；</p><p>packet_queue_start函数在上锁状态下将abort_request设置为0，serial加1；</p><p>packet_queue_get是唯一的读取函数接受四个参数，第一个参数q指定PacketQueue，第二个参数pkt是一个指向AVPacket的指针，用于存储从q中读出的数据，第三个参数表示是否为阻塞模式，如果为0，那么当队列中没有数据时，函数会立即返回，否则将会调用SDL_CondWait()等待直到队列中有数据。第四个参数是一个传入的int变量地址，从fifo队列中读取的MyAVPacketList类型数据包含AVPacket类型的数据和一个序列号，这个序列号会被传给第四个参数指定的int变量。</p><p>packet_queue_put_private函数负责将参数pkt指向的AVPacket类型的数据连同队列q的序列号一起包装成一个MyAVPacketList类型数据写入fifo队列，然后将nb_packets加1，size加上MyAVPacketList的大小和其指向的AVPacket的大小，duration加上AVPacket的duration。写入成功后调用SDL_CondSignal()通知条件变量。该函数是执行具体写入动作的函数，只是供packet_queue_put函数调用，所以函数中没有上锁。</p><p>packet_queue_put检查参数pkt指定的数据是否为null，不为null时才在上锁状态下调用packet_queue_put_private执行真正的写入。</p><p>packet_queue_put_nullpacket用于向队列中写入一个没有数据的AVPecket包，设置了pkg的stream_index后直接调用packet_queue_put。该函数存在的意义是一个空包可以作为一个刷新包通知解码器已经到达流结束的位置了，解码器读到刷新包后会将缓存的帧数据返回。</p><p>分析完所有函数的功能，我们做一个简短的总结。PacketQueue中维护了一个fifo队列，队列中存储MyAVPacketList类型数据而不直接存储AVPacket类型数据的原因是需要为每个包添加一个序列号，这个序列号在包被放入队列时会被设置为队列的序列号，序列号用于标识一段连续的内容，如果两个包的序列号不同，说明他们所表示的内容时间上不连续。需要互斥量和条件变量的原因是队列的读写操作分别在不同线程，需要线程同步。</p>]]></content>
      
      
      <categories>
          
          <category> ffplay源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffplay </tag>
            
            <tag> 源码解析 </tag>
            
            <tag> 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffplay源码解析（二）：VideoState结构体</title>
      <link href="/2022/11/29/ffplay%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AVideoState%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2022/11/29/ffplay%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AVideoState%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<p>VideoState结构体是ffplay源码里最重要也是最庞大的一个结构体，可以说是“包罗万象”，整个源码读下来给人的感觉就是只要是需要在函数间传递的参数，都会被放进这个结构体，然后相关的函数之间传VideoState的指针就好。这样做的好处是不用费力为每个函数想不同的参数名，后期增删参数时只需要修改VideoState结构体以及使用到该参数的某几行代码而不用修改所有相关函数的调用。坏处就是代码的耦合度太高了，不过对于单个源文件写完所有功能的ffplay来说，这并不算是什么大问题。</p><p>VideoState结构体的注释如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">VideoState</span> &#123;</span><br><span class="line">  SDL_Thread *read_tid;<span class="comment">//读线程id</span></span><br><span class="line">  <span class="type">const</span> AVInputFormat *iformat;<span class="comment">//输入文件格式</span></span><br><span class="line">  <span class="type">int</span> abort_request;<span class="comment">//为1时，读线程退出</span></span><br><span class="line">  <span class="type">int</span> force_refresh;<span class="comment">//强制刷新标志位</span></span><br><span class="line">  <span class="type">int</span> paused;<span class="comment">//播放暂停标志位</span></span><br><span class="line">  <span class="type">int</span> last_paused;<span class="comment">//上一次设置的paused标志位</span></span><br><span class="line">  <span class="type">int</span> queue_attachments_req;<span class="comment">//请求流中的附加信息（如封面图片）的标志位</span></span><br><span class="line">  <span class="type">int</span> seek_req;<span class="comment">//查找请求</span></span><br><span class="line">  <span class="type">int</span> seek_flags;<span class="comment">//指定查找行为的标志位</span></span><br><span class="line">  <span class="type">int64_t</span> seek_pos;<span class="comment">//查找位置</span></span><br><span class="line">  <span class="type">int64_t</span> seek_rel;<span class="comment">//查找粒度</span></span><br><span class="line">  <span class="type">int</span> read_pause_return;<span class="comment">//保存av_read_pause()函数的返回值</span></span><br><span class="line">  AVFormatContext *ic;</span><br><span class="line">  <span class="type">int</span> realtime;<span class="comment">//是否是实时流</span></span><br><span class="line"></span><br><span class="line">  Clock audclk;<span class="comment">//音频流时钟</span></span><br><span class="line">  Clock vidclk;<span class="comment">//视频流时钟</span></span><br><span class="line">  Clock extclk;<span class="comment">//外部时钟</span></span><br><span class="line"></span><br><span class="line">  FrameQueue pictq;<span class="comment">//视频流的帧队列</span></span><br><span class="line">  FrameQueue subpq;<span class="comment">//字幕流的帧队列</span></span><br><span class="line">  FrameQueue sampq;<span class="comment">//音频流的帧队列</span></span><br><span class="line"></span><br><span class="line">  Decoder auddec;<span class="comment">//音频解码器</span></span><br><span class="line">  Decoder viddec;<span class="comment">//视频解码器</span></span><br><span class="line">  Decoder subdec;<span class="comment">//字幕解码器</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> audio_stream;<span class="comment">//音频流序号</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> av_sync_type;<span class="comment">//音视频同步模式</span></span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> audio_clock;<span class="comment">//音频时钟数值</span></span><br><span class="line">  <span class="type">int</span> audio_clock_serial;<span class="comment">//音频时钟序列号</span></span><br><span class="line">  <span class="type">double</span> audio_diff_cum; <span class="comment">/* used for AV difference average computation */</span></span><br><span class="line">  <span class="type">double</span> audio_diff_avg_coef;</span><br><span class="line">  <span class="type">double</span> audio_diff_threshold;</span><br><span class="line">  <span class="type">int</span> audio_diff_avg_count;<span class="comment">//以上几个值用于计算音频重采样的样本数</span></span><br><span class="line">  AVStream *audio_st;<span class="comment">//指向音频流的指针</span></span><br><span class="line">  PacketQueue audioq;<span class="comment">//音频流的包队列</span></span><br><span class="line">  <span class="type">int</span> audio_hw_buf_size;<span class="comment">//硬件支持的音频缓冲区大小</span></span><br><span class="line">  <span class="type">uint8_t</span> *audio_buf;<span class="comment">//指向储存音频数据的缓冲区</span></span><br><span class="line">  <span class="type">uint8_t</span> *audio_buf1;<span class="comment">//指向储存音频数据的缓冲区</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> audio_buf_size; <span class="comment">/* in bytes */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> audio_buf1_size;<span class="comment">//缓冲区大小</span></span><br><span class="line">  <span class="type">int</span> audio_buf_index; <span class="comment">/* 音频缓冲区读取位置 in bytes */</span></span><br><span class="line">  <span class="type">int</span> audio_write_buf_size;<span class="comment">//音频缓冲区中可写区域的大小</span></span><br><span class="line">  <span class="type">int</span> audio_volume;<span class="comment">//音量值</span></span><br><span class="line">  <span class="type">int</span> muted;<span class="comment">//是否静音</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">AudioParams</span> audio_src;<span class="comment">//音频参数</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_AVFILTER</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">AudioParams</span> audio_filter_src;<span class="comment">//滤镜处理后的音频参数</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">AudioParams</span> audio_tgt;<span class="comment">//硬件支持的音频参数</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">SwrContext</span> *swr_ctx;<span class="comment">//音频重采样上下文</span></span><br><span class="line">  <span class="type">int</span> frame_drops_early;<span class="comment">//解码过程中的丢帧数</span></span><br><span class="line">  <span class="type">int</span> frame_drops_late;<span class="comment">//渲染过程中的丢帧数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">ShowMode</span> &#123;</span><br><span class="line">    SHOW_MODE_NONE = <span class="number">-1</span>, SHOW_MODE_VIDEO = <span class="number">0</span>, SHOW_MODE_WAVES, SHOW_MODE_RDFT, SHOW_MODE_NB</span><br><span class="line">  &#125; show_mode;<span class="comment">//显示模式，分为视频模式，波形图模式以及频谱图</span></span><br><span class="line">  <span class="type">int16_t</span> sample_array[SAMPLE_ARRAY_SIZE];<span class="comment">//音频样本数组</span></span><br><span class="line">  <span class="type">int</span> sample_array_index;<span class="comment">//样本数组的读取位置</span></span><br><span class="line">  <span class="type">int</span> last_i_start;</span><br><span class="line">  RDFTContext *rdft;<span class="comment">//实时傅里叶变换上下文</span></span><br><span class="line">  <span class="type">int</span> rdft_bits;</span><br><span class="line">  FFTSample *rdft_data;</span><br><span class="line">  <span class="type">int</span> xpos;</span><br><span class="line">  <span class="type">double</span> last_vis_time;</span><br><span class="line">  SDL_Texture *vis_texture;<span class="comment">//用于渲染音频图像的纹理结构体指针</span></span><br><span class="line">  SDL_Texture *sub_texture;<span class="comment">//用于渲染字幕的纹理结构体指针</span></span><br><span class="line">  SDL_Texture *vid_texture;<span class="comment">//用于渲染视频的纹理结构体指针</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> subtitle_stream;<span class="comment">//字幕流序号</span></span><br><span class="line">  AVStream *subtitle_st;<span class="comment">//指向字幕流的指针</span></span><br><span class="line">  PacketQueue subtitleq;<span class="comment">//字幕流的包队列</span></span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> frame_timer;<span class="comment">//帧计时器</span></span><br><span class="line">  <span class="type">double</span> frame_last_returned_time;</span><br><span class="line">  <span class="type">double</span> frame_last_filter_delay;</span><br><span class="line">  <span class="type">int</span> video_stream;<span class="comment">//视频流序号</span></span><br><span class="line">  AVStream *video_st;<span class="comment">//视频流指针</span></span><br><span class="line">  PacketQueue videoq;<span class="comment">//视频流包队列</span></span><br><span class="line">  <span class="type">double</span> max_frame_duration; <span class="comment">//单个帧最大的持续时间   // maximum duration of a frame - above this, we consider the jump a timestamp discontinuity</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">SwsContext</span> *img_convert_ctx;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">SwsContext</span> *sub_convert_ctx;</span><br><span class="line">  <span class="type">int</span> eof;<span class="comment">//文件结束标志位</span></span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> *filename;<span class="comment">//文件名</span></span><br><span class="line">  <span class="type">int</span> width, height, xleft, ytop;<span class="comment">//窗口的位置和大小</span></span><br><span class="line">  <span class="type">int</span> step;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_AVFILTER</span></span><br><span class="line">  <span class="type">int</span> vfilter_idx;</span><br><span class="line">  AVFilterContext *in_video_filter;   <span class="comment">// the first filter in the video chain</span></span><br><span class="line">  AVFilterContext *out_video_filter;  <span class="comment">// the last filter in the video chain</span></span><br><span class="line">  AVFilterContext *in_audio_filter;   <span class="comment">// the first filter in the audio chain</span></span><br><span class="line">  AVFilterContext *out_audio_filter;  <span class="comment">// the last filter in the audio chain</span></span><br><span class="line">  AVFilterGraph *agraph;              <span class="comment">// audio filter graph</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> last_video_stream, last_audio_stream, last_subtitle_stream;<span class="comment">//上一次使用的流，用于循环播放</span></span><br><span class="line"></span><br><span class="line">  SDL_cond *continue_read_thread;<span class="comment">//控制读线程是否继续读的条件变量</span></span><br><span class="line">&#125; VideoState;</span><br></pre></td></tr></table></figure><p>结构体中某些参数单从注释上很难理解其具体含义，所以在之后的源码分析中我们会反复回来看这个结构体的内容。</p><p>在分析具体代码逻辑之前，我们需要知道ffplay中用到的两个队列的用法：PacketQueue，FrameQueue。</p>]]></content>
      
      
      <categories>
          
          <category> ffplay源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffplay </tag>
            
            <tag> 源码解析 </tag>
            
            <tag> 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffplay源码解析（一）：main函数</title>
      <link href="/2022/11/27/ffplay%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Amain%E5%87%BD%E6%95%B0/"/>
      <url>/2022/11/27/ffplay%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Amain%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>ffplay源码的main函数逻辑较为简单，根据任务划分主要做了如下几件事：</p><p>1、解析参数</p><p>2、初始化相关库</p><p>3、创建SDL窗口及其对应的渲染器</p><p>4、打开流</p><p>5、开启主循环</p><p>其中解析参数这一步调用的函数是根据ffmpeg的参数规则专门编写的，具体实现在cmdutils.c中。这部分实现是ffmpeg，ffplay和ffplay三个项目共用的。当我们单独分析ffplay源码时，我们不需要知道具体的实现细节，只需要知道这一步是修改ffplay.c源文件开头定义的用于表示用户行为的静态变量就可以了，具体的变量可以在后面分析源码的时候遇到了再回头看对应的参数。</p><p>用户可以定义的静态变量有以下这些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">static const AVInputFormat *file_iformat;//对应-f参数指定的文件格式，默认是自动判断不需要手动指定</span><br><span class="line">static const char *input_filename;//输入文件名</span><br><span class="line">static const char *window_title;//主窗口标题</span><br><span class="line">static int default_width  = 640;//主窗口默认宽度</span><br><span class="line">static int default_height = 480;//主窗口默认高度</span><br><span class="line">static int screen_width  = 0;</span><br><span class="line">static int screen_height = 0;//屏幕默认宽高，没有对应参数</span><br><span class="line">static int screen_left = SDL_WINDOWPOS_CENTERED;//设置窗口左方的的x坐标，默认居中，对应参数-left</span><br><span class="line">static int screen_top = SDL_WINDOWPOS_CENTERED;//设置窗口上方的y坐标，默认居中，对应参数-top</span><br><span class="line">static int audio_disable;//关闭音频，对应参数-an</span><br><span class="line">static int video_disable;//关闭视频，对应参数-vn</span><br><span class="line">static int subtitle_disable;//关闭字幕，对应参数-sn</span><br><span class="line">static const char* wanted_stream_spec[AVMEDIA_TYPE_NB] = &#123;0&#125;;//用户设置的期望使用的流，对应参数-ast,-vst,-sst</span><br><span class="line">static int seek_by_bytes = -1;//按字节seek，对应参数-bytes</span><br><span class="line">static float seek_interval = 10;//查找间隔(步长)，对应参数-seek_interval</span><br><span class="line">static int display_disable;//关闭显示，对应参数-nodisp</span><br><span class="line">static int borderless;//窗口无边框，对应参数-noborder</span><br><span class="line">static int alwaysontop;//窗口置顶，对应参数-alwaysontop</span><br><span class="line">static int startup_volume = 100;//初始音量，对应参数-volume</span><br><span class="line">static int show_status = -1;//是否打印状态信息，对应参数-stats</span><br><span class="line">static int av_sync_type = AV_SYNC_AUDIO_MASTER;//音视频同步模式，对应参数-sync</span><br><span class="line">static int64_t start_time = AV_NOPTS_VALUE;//开始时间，对应参数-ss</span><br><span class="line">static int64_t duration = AV_NOPTS_VALUE;//持续时长，对应参数-t，这两个参数用于播放指定时间段的内容</span><br><span class="line">static int fast = 0;//允许使用非标准的加速解码手段，对应参数-fast</span><br><span class="line">static int genpts = 0;//生成时间戳，对应参数-genpts</span><br><span class="line">static int lowres = 0;//低分辨率解码</span><br><span class="line">static int decoder_reorder_pts = -1;//让解码器对pts重新排序，对应参数-drp</span><br><span class="line">static int autoexit;//播放结束自动退出，对应参数-autoexit</span><br><span class="line">static int exit_on_keydown;//按键退出播放，对应参数-exitonkeydown</span><br><span class="line">static int exit_on_mousedown;//按下鼠标退出播放，对应参数-exitonmousedown</span><br><span class="line">static int loop = 1;//循环播放，对应参数-loop</span><br><span class="line">static int framedrop = -1;//是否允许cpu性能达不到要求时丢帧，对应参数-framedrop</span><br><span class="line">static int infinite_buffer = -1;//是否限制输入缓冲区大小，对应参数-infbuf</span><br><span class="line">static enum ShowMode show_mode = SHOW_MODE_NONE;//显示模式</span><br><span class="line">static const char *audio_codec_name;//音频解码器名称，对应参数-acodec</span><br><span class="line">static const char *subtitle_codec_name;//字幕解码器名称，对应参数-scodec</span><br><span class="line">static const char *video_codec_name;//视频解码器名称，对应参数-vcodec</span><br><span class="line">double rdftspeed = 0.02;//rdft速度，对应参数-rdftspeed</span><br><span class="line">static int64_t cursor_last_shown;</span><br><span class="line">static int cursor_hidden = 0;</span><br><span class="line">#if CONFIG_AVFILTER</span><br><span class="line">static const char **vfilters_list = NULL;</span><br><span class="line">static int nb_vfilters = 0;</span><br><span class="line">static char *afilters = NULL;</span><br><span class="line">#endif</span><br><span class="line">static int autorotate = 1;//自动旋转视频，对应参数-autorotate</span><br><span class="line">static int find_stream_info = 1;//查询流信息，对应参数-find_stream_info</span><br><span class="line">static int filter_nbthreads = 0;//filter线程数，对应参数-filter_threads</span><br><span class="line"></span><br><span class="line">/* current context */</span><br><span class="line">static int is_full_screen;//是否全屏，对应参数-fs</span><br></pre></td></tr></table></figure><p>带注释的完整main函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> flags;<span class="comment">//用于创建SDL窗口时指定flag</span></span><br><span class="line">  VideoState *is;</span><br><span class="line"></span><br><span class="line">  init_dynload();<span class="comment">//当前只做一件事，在win32平台将当前工作目录从DLL搜索路径中移除</span></span><br><span class="line"></span><br><span class="line">  av_log_set_flags(AV_LOG_SKIP_REPEATED);<span class="comment">//折叠重复日志</span></span><br><span class="line">  parse_loglevel(argc, argv, options);<span class="comment">//解析loglevel</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* register all codecs, demux and protocols */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_AVDEVICE</span></span><br><span class="line">  avdevice_register_all();<span class="comment">//初始化libavdeivce库并且注册所有输入输出设备</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  avformat_network_init();<span class="comment">//初始化网络库</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//指定SIGINT和SIGTERM两个信号的处理函数</span></span><br><span class="line">  signal(SIGINT , sigterm_handler); <span class="comment">/* Interrupt (ANSI).    */</span></span><br><span class="line">  signal(SIGTERM, sigterm_handler); <span class="comment">/* Termination (ANSI).  */</span></span><br><span class="line"></span><br><span class="line">  show_banner(argc, argv, options);<span class="comment">//打印程序和库的信息</span></span><br><span class="line"></span><br><span class="line">  parse_options(<span class="literal">NULL</span>, argc, argv, options, opt_input_file);<span class="comment">//解析参数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*必须有输入文件，否则退出*/</span></span><br><span class="line">  <span class="keyword">if</span> (!input_filename) &#123;</span><br><span class="line">    show_usage();</span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_FATAL, <span class="string">&quot;An input file must be specified\n&quot;</span>);</span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_FATAL,</span><br><span class="line">           <span class="string">&quot;Use -h to get full help or, even better, run &#x27;man %s&#x27;\n&quot;</span>, program_name);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*判断是否显示画面*/</span></span><br><span class="line">  <span class="keyword">if</span> (display_disable) &#123;<span class="comment">//display_disable通过命令行参数-nodisp设置</span></span><br><span class="line">    video_disable = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  flags = SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER;<span class="comment">//默认加载SDL的video、audio和timer子系统</span></span><br><span class="line">  <span class="keyword">if</span> (audio_disable)<span class="comment">//audio_disable通过命令行参数-an设置</span></span><br><span class="line">    flags &amp;= ~SDL_INIT_AUDIO;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Try to work around an occasional ALSA buffer underflow issue when the</span></span><br><span class="line"><span class="comment">     * period size is NPOT due to ALSA resampling by forcing the buffer size. */</span></span><br><span class="line">    <span class="keyword">if</span> (!SDL_getenv(<span class="string">&quot;SDL_AUDIO_ALSA_SET_BUFFER_SIZE&quot;</span>))</span><br><span class="line">      SDL_setenv(<span class="string">&quot;SDL_AUDIO_ALSA_SET_BUFFER_SIZE&quot;</span>,<span class="string">&quot;1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (display_disable)</span><br><span class="line">    flags &amp;= ~SDL_INIT_VIDEO;</span><br><span class="line">  <span class="keyword">if</span> (SDL_Init (flags)) &#123;<span class="comment">//用配置好的flags初始化SDL</span></span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_FATAL, <span class="string">&quot;Could not initialize SDL - %s\n&quot;</span>, SDL_GetError());</span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_FATAL, <span class="string">&quot;(Did you set the DISPLAY variable?)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//忽略事件</span></span><br><span class="line">  SDL_EventState(SDL_SYSWMEVENT, SDL_IGNORE);</span><br><span class="line">  SDL_EventState(SDL_USEREVENT, SDL_IGNORE);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!display_disable) &#123;</span><br><span class="line">    <span class="type">int</span> flags = SDL_WINDOW_HIDDEN;<span class="comment">//配置SDL创建窗口的标志位</span></span><br><span class="line">    <span class="keyword">if</span> (alwaysontop)</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> SDL_VERSION_ATLEAST(2,0,5)</span></span><br><span class="line">      flags |= SDL_WINDOW_ALWAYS_ON_TOP;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_WARNING, <span class="string">&quot;Your SDL version doesn&#x27;t support SDL_WINDOW_ALWAYS_ON_TOP. Feature will be inactive.\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (borderless)</span><br><span class="line">      flags |= SDL_WINDOW_BORDERLESS;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      flags |= SDL_WINDOW_RESIZABLE;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR</span></span><br><span class="line">    SDL_SetHint(SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    window = SDL_CreateWindow(program_name, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, default_width, default_height, flags);<span class="comment">//创建SDL窗口</span></span><br><span class="line">    SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, <span class="string">&quot;linear&quot;</span>);<span class="comment">//设置默认的图片缩放质量为线性</span></span><br><span class="line">    <span class="keyword">if</span> (window) &#123;</span><br><span class="line">      renderer = SDL_CreateRenderer(window, <span class="number">-1</span>, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);<span class="comment">//从窗口创建渲染器</span></span><br><span class="line">      <span class="keyword">if</span> (!renderer) &#123;</span><br><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_WARNING, <span class="string">&quot;Failed to initialize a hardware accelerated renderer: %s\n&quot;</span>, SDL_GetError());</span><br><span class="line">        renderer = SDL_CreateRenderer(window, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (renderer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!SDL_GetRendererInfo(renderer, &amp;renderer_info))<span class="comment">//打印渲染器信息</span></span><br><span class="line">          av_log(<span class="literal">NULL</span>, AV_LOG_VERBOSE, <span class="string">&quot;Initialized %s renderer.\n&quot;</span>, renderer_info.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!window || !renderer || !renderer_info.num_texture_formats) &#123;<span class="comment">//打印失败信息</span></span><br><span class="line">      av_log(<span class="literal">NULL</span>, AV_LOG_FATAL, <span class="string">&quot;Failed to create window or renderer: %s&quot;</span>, SDL_GetError());</span><br><span class="line">      do_exit(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  is = stream_open(input_filename, file_iformat);<span class="comment">//打开视频/音频/字幕流</span></span><br><span class="line">  <span class="keyword">if</span> (!is) &#123;</span><br><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_FATAL, <span class="string">&quot;Failed to initialize VideoState!\n&quot;</span>);</span><br><span class="line">    do_exit(<span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  event_loop(is);<span class="comment">//开启SDL事件循环</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* never returns */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码篇幅上看，main函数中绝大多数代码是用来配置SDL_init()和SDL_CreateWindow()这两个函数的标志位flags的。</p><p>其中SDL_Init()函数是用来初始化SDL库的，在使用任何SDL库函数之前必须先调用这个函数。SDL_Init接受一个Uint32类型的flags参数用来初始化SDL子系统，如SDL_INIT_AUDIO表示音频子系统，SDL_INIT_VIDEO表示视频子系统等，可以通过位或操作组合多个标志位来初始化多个子系统的目的，如SDL_INIT_AUDIO|SDL_INIT_VIDEO表示初始化音频子系统和视频子系统。SDL_Init()可用的标志位及其含义如下：</p><p>SDL_INIT_TIMER: timer subsystem<br>SDL_INIT_AUDIO: audio subsystem<br>SDL_INIT_VIDEO: video subsystem; automatically initializes the events subsystem<br>SDL_INIT_JOYSTICK: joystick subsystem; automatically initializes the events subsystem<br>SDL_INIT_HAPTIC: haptic (force feedback) subsystem<br>SDL_INIT_GAMECONTROLLER: controller subsystem; automatically initializes the joystick subsystem<br>SDL_INIT_EVENTS: events subsystem<br>SDL_INIT_EVERYTHING: all of the above subsystems<br>SDL_INIT_NOPARACHUTE: compatibility; this flag is ignored</p><p>完成SDL库的初始化后，接着开始创建主窗口以及对应的渲染器，主要使用SDL_CreateWindow()和SDL_CreateRenderer()这两个函数，创建成功以及打印完相关信息后，main函数中的可以归属为”初始化任务”的代码就结束了。</p><p>接下来的代码更简单直接，只是调用了stream_open()和event_loop()这两个函数。从函数名推断stream_open()用来打开流，event_loop()用来处理事件循环。事实也正是如此，不过有亿点不同的是：stream_open()不仅完成了打开流的工作，还完成了所有流的读取以及音频流向音频设备的输出；event_loop()除了处理SDL的事件循环，还负责视频流以及字幕流向显示设备的输出。</p>]]></content>
      
      
      <categories>
          
          <category> ffplay源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffplay </tag>
            
            <tag> 源码解析 </tag>
            
            <tag> 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
