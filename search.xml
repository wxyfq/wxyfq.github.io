<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ffplay源码解析（一）：main函数</title>
      <link href="/2022/11/27/ffplay%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Amain%E5%87%BD%E6%95%B0/"/>
      <url>/2022/11/27/ffplay%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9Amain%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>ffplay源码的main函数逻辑较为简单，根据任务划分主要做了如下几件事：</p><p>1、解析参数</p><p>2、初始化相关库</p><p>3、创建SDL窗口及其对应的渲染器</p><p>4、打开流</p><p>5、开启主循环</p><p>其中解析参数这一步调用的函数是根据ffmpeg的参数规则专门编写的，具体实现在cmdutils.c中。这部分实现是ffmpeg，ffplay和ffplay三个项目共用的。当我们单独分析ffplay源码时，我们不需要知道具体的实现细节，只需要知道这一步是修改ffplay.c源文件开头定义的用于表示用户行为的静态变量就可以了，具体的变量可以在后面分析源码的时候遇到了再回头看对应的参数。</p><p>用户可以定义的静态变量有以下这些：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> AVInputFormat *file_iformat;<span class="comment">//对应-f参数指定的文件格式，默认是自动判断不需要手动指定</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *input_filename;<span class="comment">//输入文件名</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *window_title;<span class="comment">//主窗口标题</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> default_width  = <span class="number">640</span>;<span class="comment">//主窗口默认宽度</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> default_height = <span class="number">480</span>;<span class="comment">//主窗口默认高度</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> screen_width  = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> screen_height = <span class="number">0</span>;<span class="comment">//屏幕默认宽高，没有对应参数</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> screen_left = SDL_WINDOWPOS_CENTERED;<span class="comment">//设置窗口左方的的x坐标，默认居中，对应参数-left</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> screen_top = SDL_WINDOWPOS_CENTERED;<span class="comment">//设置窗口上方的y坐标，默认居中，对应参数-top</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> audio_disable;<span class="comment">//关闭音频，对应参数-an</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> video_disable;<span class="comment">//关闭视频，对应参数-vn</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> subtitle_disable;<span class="comment">//关闭字幕，对应参数-sn</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* wanted_stream_spec[AVMEDIA_TYPE_NB] = &#123;<span class="number">0</span>&#125;;<span class="comment">//用户设置的期望使用的流，对应参数-ast,-vst,-sst</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> seek_by_bytes = <span class="number">-1</span>;<span class="comment">//按字节seek，对应参数-bytes</span></span><br><span class="line"><span class="type">static</span> <span class="type">float</span> seek_interval = <span class="number">10</span>;<span class="comment">//查找间隔(步长)，对应参数-seek_interval</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> display_disable;<span class="comment">//关闭显示，对应参数-nodisp</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> borderless;<span class="comment">//窗口无边框，对应参数-noborder</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> alwaysontop;<span class="comment">//窗口置顶，对应参数-alwaysontop</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> startup_volume = <span class="number">100</span>;<span class="comment">//初始音量，对应参数-volume</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> show_status = <span class="number">-1</span>;<span class="comment">//是否打印状态信息，对应参数-stats</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> av_sync_type = AV_SYNC_AUDIO_MASTER;<span class="comment">//音视频同步模式，对应参数-sync</span></span><br><span class="line"><span class="type">static</span> <span class="type">int64_t</span> start_time = AV_NOPTS_VALUE;<span class="comment">//开始时间，对应参数-ss</span></span><br><span class="line"><span class="type">static</span> <span class="type">int64_t</span> duration = AV_NOPTS_VALUE;<span class="comment">//持续时长，对应参数-t，这两个参数用于播放指定时间段的内容</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> fast = <span class="number">0</span>;<span class="comment">//允许使用非标准的加速解码手段，对应参数-fast</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> genpts = <span class="number">0</span>;<span class="comment">//生成时间戳，对应参数-genpts</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> lowres = <span class="number">0</span>;<span class="comment">//低分辨率解码</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> decoder_reorder_pts = <span class="number">-1</span>;<span class="comment">//让解码器对pts重新排序，对应参数-drp</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> autoexit;<span class="comment">//播放结束自动退出，对应参数-autoexit</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> exit_on_keydown;<span class="comment">//按键退出播放，对应参数-exitonkeydown</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> exit_on_mousedown;<span class="comment">//按下鼠标退出播放，对应参数-exitonmousedown</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> loop = <span class="number">1</span>;<span class="comment">//循环播放，对应参数-loop</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> framedrop = <span class="number">-1</span>;<span class="comment">//是否允许cpu性能达不到要求时丢帧，对应参数-framedrop</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> infinite_buffer = <span class="number">-1</span>;<span class="comment">//是否限制输入缓冲区大小，对应参数-infbuf</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">enum</span> <span class="title class_">ShowMode</span> show_mode = SHOW_MODE_NONE;<span class="comment">//显示模式</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *audio_codec_name;<span class="comment">//音频解码器名称，对应参数-acodec</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *subtitle_codec_name;<span class="comment">//字幕解码器名称，对应参数-scodec</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *video_codec_name;<span class="comment">//视频解码器名称，对应参数-vcodec</span></span><br><span class="line"><span class="type">double</span> rdftspeed = <span class="number">0.02</span>;<span class="comment">//rdft速度，对应参数-rdftspeed</span></span><br><span class="line"><span class="type">static</span> <span class="type">int64_t</span> cursor_last_shown;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> cursor_hidden = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_AVFILTER</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> **vfilters_list = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> nb_vfilters = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *afilters = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> autorotate = <span class="number">1</span>;<span class="comment">//自动旋转视频，对应参数-autorotate</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> find_stream_info = <span class="number">1</span>;<span class="comment">//查询流信息，对应参数-find_stream_info</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> filter_nbthreads = <span class="number">0</span>;<span class="comment">//filter线程数，对应参数-filter_threads</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* current context */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> is_full_screen;<span class="comment">//是否全屏，对应参数-fs</span></span><br></pre></td></tr></table></figure><p>带注释的完整main函数如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> flags;<span class="comment">//用于创建SDL窗口时指定flag</span></span><br><span class="line">  VideoState *is;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">init_dynload</span>();<span class="comment">//当前只做一件事，在win32平台将当前工作目录从DLL搜索路径中移除</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">av_log_set_flags</span>(AV_LOG_SKIP_REPEATED);<span class="comment">//折叠重复日志</span></span><br><span class="line">  <span class="built_in">parse_loglevel</span>(argc, argv, options);<span class="comment">//解析loglevel</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* register all codecs, demux and protocols */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_AVDEVICE</span></span><br><span class="line">  <span class="built_in">avdevice_register_all</span>();<span class="comment">//初始化libavdeivce库并且注册所有输入输出设备</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="built_in">avformat_network_init</span>();<span class="comment">//初始化网络库</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//指定SIGINT和SIGTERM两个信号的处理函数</span></span><br><span class="line">  <span class="built_in">signal</span>(SIGINT , sigterm_handler); <span class="comment">/* Interrupt (ANSI).    */</span></span><br><span class="line">  <span class="built_in">signal</span>(SIGTERM, sigterm_handler); <span class="comment">/* Termination (ANSI).  */</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">show_banner</span>(argc, argv, options);<span class="comment">//打印程序和库的信息</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">parse_options</span>(<span class="literal">NULL</span>, argc, argv, options, opt_input_file);<span class="comment">//解析参数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*必须有输入文件，否则退出*/</span></span><br><span class="line">  <span class="keyword">if</span> (!input_filename) &#123;</span><br><span class="line">    <span class="built_in">show_usage</span>();</span><br><span class="line">    <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_FATAL, <span class="string">&quot;An input file must be specified\n&quot;</span>);</span><br><span class="line">    <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_FATAL,</span><br><span class="line">           <span class="string">&quot;Use -h to get full help or, even better, run &#x27;man %s&#x27;\n&quot;</span>, program_name);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*判断是否显示画面*/</span></span><br><span class="line">  <span class="keyword">if</span> (display_disable) &#123;<span class="comment">//display_disable通过命令行参数-nodisp设置</span></span><br><span class="line">    video_disable = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  flags = SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER;<span class="comment">//默认加载SDL的video、audio和timer子系统</span></span><br><span class="line">  <span class="keyword">if</span> (audio_disable)<span class="comment">//audio_disable通过命令行参数-an设置</span></span><br><span class="line">    flags &amp;= ~SDL_INIT_AUDIO;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* Try to work around an occasional ALSA buffer underflow issue when the</span></span><br><span class="line"><span class="comment">     * period size is NPOT due to ALSA resampling by forcing the buffer size. */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">SDL_getenv</span>(<span class="string">&quot;SDL_AUDIO_ALSA_SET_BUFFER_SIZE&quot;</span>))</span><br><span class="line">      <span class="built_in">SDL_setenv</span>(<span class="string">&quot;SDL_AUDIO_ALSA_SET_BUFFER_SIZE&quot;</span>,<span class="string">&quot;1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (display_disable)</span><br><span class="line">    flags &amp;= ~SDL_INIT_VIDEO;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">SDL_Init</span> (flags)) &#123;<span class="comment">//用配置好的flags初始化SDL</span></span><br><span class="line">    <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_FATAL, <span class="string">&quot;Could not initialize SDL - %s\n&quot;</span>, <span class="built_in">SDL_GetError</span>());</span><br><span class="line">    <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_FATAL, <span class="string">&quot;(Did you set the DISPLAY variable?)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//忽略事件</span></span><br><span class="line">  <span class="built_in">SDL_EventState</span>(SDL_SYSWMEVENT, SDL_IGNORE);</span><br><span class="line">  <span class="built_in">SDL_EventState</span>(SDL_USEREVENT, SDL_IGNORE);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!display_disable) &#123;</span><br><span class="line">    <span class="type">int</span> flags = SDL_WINDOW_HIDDEN;<span class="comment">//配置SDL创建窗口的标志位</span></span><br><span class="line">    <span class="keyword">if</span> (alwaysontop)</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> SDL_VERSION_ATLEAST(2,0,5)</span></span><br><span class="line">      flags |= SDL_WINDOW_ALWAYS_ON_TOP;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_WARNING, <span class="string">&quot;Your SDL version doesn&#x27;t support SDL_WINDOW_ALWAYS_ON_TOP. Feature will be inactive.\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (borderless)</span><br><span class="line">      flags |= SDL_WINDOW_BORDERLESS;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      flags |= SDL_WINDOW_RESIZABLE;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR</span></span><br><span class="line">    <span class="built_in">SDL_SetHint</span>(SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    window = <span class="built_in">SDL_CreateWindow</span>(program_name, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, default_width, default_height, flags);<span class="comment">//创建SDL窗口</span></span><br><span class="line">    <span class="built_in">SDL_SetHint</span>(SDL_HINT_RENDER_SCALE_QUALITY, <span class="string">&quot;linear&quot;</span>);<span class="comment">//设置默认的图片缩放质量为线性</span></span><br><span class="line">    <span class="keyword">if</span> (window) &#123;</span><br><span class="line">      renderer = <span class="built_in">SDL_CreateRenderer</span>(window, <span class="number">-1</span>, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);<span class="comment">//从窗口创建渲染器</span></span><br><span class="line">      <span class="keyword">if</span> (!renderer) &#123;</span><br><span class="line">        <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_WARNING, <span class="string">&quot;Failed to initialize a hardware accelerated renderer: %s\n&quot;</span>, <span class="built_in">SDL_GetError</span>());</span><br><span class="line">        renderer = <span class="built_in">SDL_CreateRenderer</span>(window, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (renderer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">SDL_GetRendererInfo</span>(renderer, &amp;renderer_info))<span class="comment">//打印渲染器信息</span></span><br><span class="line">          <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_VERBOSE, <span class="string">&quot;Initialized %s renderer.\n&quot;</span>, renderer_info.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!window || !renderer || !renderer_info.num_texture_formats) &#123;<span class="comment">//打印失败信息</span></span><br><span class="line">      <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_FATAL, <span class="string">&quot;Failed to create window or renderer: %s&quot;</span>, <span class="built_in">SDL_GetError</span>());</span><br><span class="line">      <span class="built_in">do_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  is = <span class="built_in">stream_open</span>(input_filename, file_iformat);<span class="comment">//打开视频/音频/字幕流</span></span><br><span class="line">  <span class="keyword">if</span> (!is) &#123;</span><br><span class="line">    <span class="built_in">av_log</span>(<span class="literal">NULL</span>, AV_LOG_FATAL, <span class="string">&quot;Failed to initialize VideoState!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">do_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">event_loop</span>(is);<span class="comment">//开启SDL事件循环</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* never returns */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码篇幅上看，main函数中绝大多数代码是用来配置SDL_init()和SDL_CreateWindow()这两个函数的标志位flags的。</p><p>其中SDL_Init()函数是用来初始化SDL库的，在使用任何SDL库函数之前必须先调用这个函数。SDL_Init接受一个Uint32类型的flags参数用来初始化SDL子系统，如SDL_INIT_AUDIO表示音频子系统，SDL_INIT_VIDEO表示视频子系统等，可以通过位或操作组合多个标志位来初始化多个子系统的目的，如SDL_INIT_AUDIO|SDL_INIT_VIDEO表示初始化音频子系统和视频子系统。SDL_Init()可用的标志位及其含义如下：</p><p>SDL_INIT_TIMER: timer subsystem<br>SDL_INIT_AUDIO: audio subsystem<br>SDL_INIT_VIDEO: video subsystem; automatically initializes the events subsystem<br>SDL_INIT_JOYSTICK: joystick subsystem; automatically initializes the events subsystem<br>SDL_INIT_HAPTIC: haptic (force feedback) subsystem<br>SDL_INIT_GAMECONTROLLER: controller subsystem; automatically initializes the joystick subsystem<br>SDL_INIT_EVENTS: events subsystem<br>SDL_INIT_EVERYTHING: all of the above subsystems<br>SDL_INIT_NOPARACHUTE: compatibility; this flag is ignored</p><p>完成SDL库的初始化后，接着开始创建主窗口以及对应的渲染器，主要使用SDL_CreateWindow()和SDL_CreateRenderer()这两个函数，创建成功以及打印完相关信息后，main函数中的可以归属为”初始化任务”的代码就结束了。</p><p>接下来的代码更简单直接，只是调用了stream_open()和event_loop()这两个函数。从函数名推断stream_open()用来打开流，event_loop()用来处理事件循环。事实也正是如此，不过有亿点不同的是：stream_open()不仅完成了打开流的工作，还完成了所有流的读取以及音频流向音频设备的输出；event_loop()除了处理SDL的事件循环，还负责视频流以及字幕流向显示设备的输出。</p>]]></content>
      
      
      <categories>
          
          <category> ffplay源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffplay </tag>
            
            <tag> 源码解析 </tag>
            
            <tag> 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
